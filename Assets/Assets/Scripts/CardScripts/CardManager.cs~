using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

public class CardManager : MonoBehaviour {
  public Player[] players;
  public Pile[] piles;
  public Player playerPrefab;

  public int numPiles { get { return piles.Length; } }
  private int numPlayers = 2;
  private bool gameStart = false; 
  private int playerNumber = -1;
  private Collider2D hovering = null;

	void Start () {
    CardSet.loadCards("BasicSet");
	}
	
	void Update () {
    if (gameStart) { 
      Vector2 hover = Camera.main.ScreenToWorldPoint(Input.mousePosition);
      Collider2D hovered = Physics2D.OverlapPoint(hover);
      if (hovered == null) { 
        if (hovering != null) {
          hovering.gameObject.transform.localScale = new Vector3(0.4f,0.4f,0.4f);
          Vector3 temp = hovering.gameObject.transform.localPosition;
          temp.z = 0.0f;
          hovering.gameObject.transform.localPosition = temp;
        }
        hovering = null;
      }
      else if (hovered != hovering) {
        if (hovering != null) {
          hovering.gameObject.transform.localScale = new Vector3(0.4f,0.4f,0.4f);
          Vector3 temp = hovering.gameObject.transform.localPosition;
          temp.z = 0.0f;
          hovering.gameObject.transform.localPosition = temp;
        }
        if (hovered.gameObject.tag == "CardFrame") {
          hovering = hovered;
          hovered.gameObject.transform.localScale = new Vector3(1,1,1);
          Vector3 temp = hovering.gameObject.transform.localPosition;
          temp.z = -0.1f;
          hovering.gameObject.transform.localPosition = temp;
        }
      }
    }
    if (gameStart && Input.GetMouseButtonDown(0) && !players[playerNumber].done) {
      Vector2 click = Camera.main.ScreenToWorldPoint(Input.mousePosition);
      Collider2D clicked = Physics2D.OverlapPoint(click);
      if (clicked) {
        if (clicked.gameObject.layer == LayerMask.NameToLayer("Players")) {
          DisplaySlot dc = clicked.gameObject.transform.parent.GetComponent<DisplaySlot>();
          Hand hand = dc.transform.parent.GetComponent<Hand>();
          if (hand != null && hand.transform.parent.GetComponent<Player>() == players[playerNumber]) {
            players[playerNumber].TryPlayCard(dc);
          }
        }
        if (clicked.gameObject.layer == LayerMask.NameToLayer("Piles")) {
          Pile p = clicked.gameObject.transform.parent.GetComponent<Pile>();
          if (p != null) {
            players[playerNumber].TryGainCard(p);
          }
        }
      }
    }
	}

  void OnGUI() {
    if (!gameStart && Network.isServer) {
      if (GUI.Button(new Rect(Screen.width - 130, 10, 120, 20), "Start Game")) {
        GameInit();
        NewTurn();
      }
    }
    if (gameStart && !players[playerNumber].done && GUI.Button(new Rect(Screen.width - 130, 10, 120, 20), "End Turn")){ 
      players[playerNumber].EndTurn();
    }
    if (gameStart) {
      bool end = true;
      foreach (Player p in players) {
        if (p.done == false) {
          end = false;
          break;
        }
      }
      if (end == true) {
        players[0].TakeDamage(players[1].attack - players[0].defense);
        players[1].TakeDamage(players[0].attack - players[0].defense);
        NewTurn();
      }
    }
  }

  private void NewTurn() {
    foreach (Player p in players) {
      p.NewTurn();
    }
  }

  private void GameInit() {
    numPlayers = Network.connections.Length + 1; 
    networkView.RPC("SetNumber", RPCMode.All, numPlayers);
    for (int i = 0; i < numPlayers; i++) {
      players[i] = (Player) Network.Instantiate(playerPrefab, new Vector3(0, -5.5f * Mathf.Pow(-1, i), 0), Quaternion.Euler(0,0,180 * -i), 0);
      NetworkPlayer player = i == 0 ? Network.player : Network.connections[i - 1];
      //NetworkPlayer player = Network.connections[i];
      players[i].networkPlayer = player;
      players[i].gameObject.transform.parent = this.gameObject.transform;
      networkView.RPC("AddHand", RPCMode.Others, players[i].networkView.viewID, player);
    }
  }

  [RPC]
  private void SetNumber(int num) {
    gameStart = true;
    playerNumber = (int) Int32.Parse(Network.player.ToString());
    //Debug.Log(playerNumber);
    players = new Player[num];
  }

  [RPC]
  private void AddHand(NetworkViewID viewID, NetworkPlayer player) {
    Debug.Log(player);
    int pnum = Int32.Parse(player.ToString());
    players[pnum] = NetworkView.Find(viewID).gameObject.GetComponent<Player>();
    players[pnum].networkPlayer = player;
    players[pnum].gameObject.transform.parent = this.gameObject.transform;
    numPlayers = pnum + 1;
  }
}
